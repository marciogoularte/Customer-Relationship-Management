@using TVChannelsCRM.Web.Areas.Administration.ViewModels.Admin
@model IEnumerable<string>

@{
    ViewBag.Title = "Users";
    const string controllerName = "Admin";
}

<h2>Users</h2>

@(Html.Kendo()
    .Grid<UserViewModel>()
    .Name("grid-users")
    .Columns(columns =>
    {
        columns.Bound(model => model.UserName).Width(60);
        columns.Bound(model => model.Email).Width(60);
        columns.Bound(model => model.FirstName).Width(60);
        columns.Bound(model => model.SecondName).Hidden(true);
        columns.Bound(model => model.LastName).Width(60);
        columns.Bound(model => model.Gender).Hidden(true);
        columns.Bound(model => model.Age).Hidden(true);
        columns.Bound(model => model.Town).Hidden(true);
        columns.Bound(model => model.Country).Hidden(true);
        columns.Bound(model => model.EnterprisePosition).Width(60);
        columns.Bound(model => model.PhoneNumber).Width(60);
        columns.Bound(model => model.Website).ClientTemplate("<a target='_blank' href='#=Website#'>link</a>").Hidden(true);
        columns.Command(command =>
        {
            command.Custom("Profile").Click("viewDetails");
            command.Edit();
            command.Destroy();
        });
    })
    .ToolBar(toolBar =>
    {
        toolBar.Template(@<text>

            @(Html.Kendo().AutoComplete()
                .Name("searchbox-users")
                .Placeholder("Username... ")
                .BindTo(Model)
                .Filter("contains")
            )
            <a class="k-button k-button-icontext k-grid-add" href="/Administration/Admin/ReadUsers?grid-users-mode=insert"><span class="k-icon k-add"></span>Add new record</a>
            <button class="k-button k-button-icontext k-grid-excel"><span class="k-icon k-i-excel"></span>Export to Excel</button>
            <button class="k-button k-button-icontext k-grid-pdf"><span class="k-icon k-i-pdf"></span>Export to PDF</button>

        </text>);
    })
    .Groupable()
    .ColumnMenu()
    .Filterable()
    .Navigatable()
    .Resizable(r => r.Columns(true))
    .Reorderable(r => r.Columns(true))
    .Events(ev => ev.Change("selectRow"))
    .Editable(edit => edit.Mode(GridEditMode.PopUp))
    .HtmlAttributes(new { @style = "word-break:break-all;" })
    .Selectable(select => select.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Cell))
    .Excel(excel => excel
        .FileName("Users Database.xlsx")
        .Filterable(true)
        .ProxyURL(Url.Action("Excel_Export_Save", "BaseController", new {area=""}))
        )
    .Pdf(pdf => pdf
        .AllPages()
                .FileName("Users Database.pdf")
        .ProxyURL(Url.Action("Pdf_Export_Save", "BaseController", new {area=""}))
    )
    .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
    .Sortable(sort =>
    {
        sort.AllowUnsort(false);
        sort.SortMode(GridSortMode.SingleColumn);
    })
    .DataSource(data =>
    {
        data.Ajax()
            .Model(model =>
            {
                model.Id(c => c.Id);
                model.Field(c => c.CreatedOn).Editable(false);
            })
            .PageSize(10)
            .ServerOperation(true)
            .Events(ev => ev.Error("errorAlert"))
            .Read(read => read.Action("ReadUsers", controllerName).Data("addSearchUsers"))
            .Create(create => create.Action("CreateUser", controllerName))
            .Update(update => update.Action("UpdateUser", controllerName))
            .Destroy(destroy => destroy.Action("DestroyUser", controllerName));
    }))
<div id="selected">
</div>

<script>
    function onAdditionalDataUsers() {
        return {
            text: $("#searchbox-users").val()
        };
    }

    function addSearchUsers() {
        return { searchboxUsers: $('#searchbox-users').val() };
    }

    $('#searchbox-users').keyup(function () {
        $('#grid-users').data('kendoGrid').dataSource.read();
    });

    function edit(e) {
        if (!e.model.isNew()) {
            $("#CreatedOn").hide();
        }
    }

    function selectRow() {
        var selected = $.map(this.select(), function (item) {
            return $(item).text();
        });

        $('#selected').text(selected);
    }

    function viewDetails(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        window.location = '/Users/Profile/Index?userId=' + dataItem.Id;
    }

    function errorAlert() {
        console.log("An error ocurred");
    }

    function makeActiveOnClick(tab) {
        $(".tabs").removeClass('active');
        $(tab).addClass('active');
    }

    var uid = $('.k-edit-form-container').closest('[data-role=window]').data('uid'),
    model = $('#grid-users').data('kendoGrid').dataSource.getByUid(uid);
    model.set('PasswordHash', '');
</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

