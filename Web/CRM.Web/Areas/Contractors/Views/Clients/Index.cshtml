@using CRM.Services.Data.ViewModels.Contracts.Clients
@model IEnumerable<string>
@{
    ViewBag.Title = "Clients";
    const string controllerName = "Clients";
}

<h2>Clients</h2>

@(Html.Kendo()
    .Grid<ClientViewModel>()
    .Name("grid-clients")
    .Columns(columns =>
    {
        columns.Bound(model => model.Name).ClientTemplate(Html.ActionLink("#=Name#", "ClientDetails", new { clientId = "#=id#" }).ToHtmlString()).Width(200);
        columns.Bound(model => model.NameBulgarian).ClientTemplate(Html.ActionLink("#=NameBulgarian#", "ClientDetails", new { clientId = "#=id#" }).ToHtmlString()).Width(200);
        columns.Bound(model => model.TypeOfCompany).Hidden(true).Width(80);
        columns.Bound(model => model.Uic).Hidden(true);
        columns.Bound(model => model.Vat).Hidden(true);
        columns.Bound(model => model.ResidenceAndAddress).Hidden(true);
        columns.Bound(model => model.ResidenceAndAddressInBulgarian).Hidden(true);
        columns.Bound(model => model.Region).Hidden(true);
        columns.Bound(model => model.PostCode).Hidden(true);
        columns.Bound(model => model.NetworkPage).Hidden(true);
        columns.Bound(model => model.ContactPerson).Hidden(true);
        columns.Bound(model => model.PhoneNumber);
        columns.Bound(model => model.Email).Width(190);
        columns.Bound(model => model.Correspondence).Hidden(true);
        columns.Bound(model => model.FixedPhoneService).Hidden(true);
        columns.Bound(model => model.MobileVoiceServicesProvidedThroughNetwork).Hidden(true);
        columns.Bound(model => model.InternetSubs).Hidden(true);
        columns.Bound(model => model.ServicesMobileAccessToInternet).Hidden(true);
        columns.Bound(model => model.TvSubs).Hidden(true);
        columns.Bound(model => model.Coverage).Hidden(true);
        columns.Bound(model => model.Management).Hidden(true);
        columns.Bound(model => model.ManagementInBulgarian).Hidden(true);
        columns.Bound(model => model.ManagementPhone).Hidden(true);
        columns.Bound(model => model.ManagementEmail).Hidden(true);
        columns.Bound(model => model.Finance).Hidden(true);
        columns.Bound(model => model.FinancePhone).Hidden(true);
        columns.Bound(model => model.FinanceEmail).Hidden(true);
        columns.Bound(model => model.TechnicalName).Hidden(true);
        columns.Bound(model => model.TechnicalPhone).Hidden(true);
        columns.Bound(model => model.TechnicalEmail ).Hidden(true);
        columns.Bound(model => model.Marketing).Hidden(true);
        columns.Bound(model => model.MarketingPhone).Hidden(true);
        columns.Bound(model => model.MarketingEmail).Hidden(true);
        columns.Bound(model => model.DealerName).Hidden(true);
        columns.Bound(model => model.DealerEmail).Hidden(true);
        columns.Bound(model => model.DealerPhone).Hidden(true);
        columns.Bound(model => model.Comments).Hidden(true);
        columns.Bound(model => model.WantToReceiveEpg).Hidden(true);
        columns.Bound(model => model.WantToReceiveNews).Hidden(true);
        columns.Command(command =>
        {
            command.Custom("Details").Click("viewDetailsClients");
            command.Edit();
            command.Destroy();
        });
    })
    .ToolBar(toolBar =>
    {
        toolBar.Template(@<text>

            @(Html.Kendo().AutoComplete()
                .Name("searchbox-clients")
                .Placeholder("Name... ")
                .BindTo(Model)
                .Filter("contains")
                  )
            @if (this.User.IsInRole("Admin") || this.User.IsInRole("Dealer"))
            {
                <a class='k-button k-button-icontext k-grid-add' href='/Users/Clients/ReadClients?grid-clients-mode=insert'><span class='k-icon k-add'></span>Add new record</a>
            }
            <button class='k-button k-button-icontext k-grid-excel'><span class='k-icon k-i-excel'></span>Export to Excel</button>
            <button class='k-button k-button-icontext k-grid-pdf'><span class='k-icon k-i-pdf'></span>Export to PDF</button>
       
         </text>);
    })
    .Groupable()
    .ColumnMenu()
    .Filterable()
    .Navigatable()
    .Resizable(r => r.Columns(true))
    .Reorderable(r => r.Columns(true))
    .Events(ev => ev.Change("selectRow"))
    .Editable(edit => edit.Mode(GridEditMode.PopUp))
    .HtmlAttributes(new { @style = "word-break:break-all;" })
    .Selectable(select => select.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Cell))
    .Excel(excel => excel
        .FileName("Clients Database.xlsx")
        .Filterable(true)
        .ProxyURL(Url.Action("Excel_Export_Save", "BaseController", new {area=""}))
        )
    .Pdf(pdf => pdf
        .AllPages()
            .FileName("Clients Database.pdf")
        .ProxyURL(Url.Action("Pdf_Export_Save", "BaseController", new {area=""}))
    )
    .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
    .Sortable(sort =>
    {
        sort.AllowUnsort(false);
        sort.SortMode(GridSortMode.SingleColumn);
    })
    .DataSource(data =>
    {
            data.Ajax()
                .Model(model => model.Id(c => c.Id))
                .PageSize(10)
                .ServerOperation(true)
                .Events(ev => ev.Error("errorAlert"))

                .Read(read => read.Action("ReadClients", controllerName).Data("addSearchClients"))
                .Create(create => create.Action("CreateClient", controllerName))
                .Update(update => update.Action("UpdateClient", controllerName))
                .Destroy(destroy => destroy.Action("DestroyClient", controllerName));
    }))
<div id="selected">
</div>

<script>
    function onAdditionalDataClients() {
        return {
            text: $("#searchbox-clients").val()
        };
    }

    function addSearchClients() {
        return { searchboxClients: $('#searchbox-clients').val() };
    }

    $('#searchbox-clients').keyup(function () {
        $('#grid-clients').data('kendoGrid').dataSource.read();
    });

    function viewDetailsClients(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location = '/Contractors/Clients/ClientDetails?clientId=' + dataItem.Id;
    }

    function selectRow() {
        var selected = $.map(this.select(), function (item) {
            return $(item).text();
        });

        $('#selected').text(selected);
    }

    function errorAlert() {
        console.log("An error ocurred");
    }

    function makeActiveOnClick(tab) {
        $(".tabs").removeClass('active');
        $(tab).addClass('active');
    }
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}