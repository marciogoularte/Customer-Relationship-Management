@using CRM.Services.Data.ViewModels.Contracts.Contracts
@model int
@{
    ViewBag.Title = "Contracts";
    const string controllerName = "Contracts";
}

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/kendo")

@Html.Label("show-all-provider-contracts", "Show all")
@Html.CheckBox("show-all-provider-contracts", false, new { id = "show-all-provider-contracts", @class = "k-button k-button-icontext k-grid-add" })

@(Html.Kendo()
    .Grid<ProviderContractViewModel>()
    .Name("grid-provider-contracts")
    .Columns(columns =>
        {
            columns.Bound(model => model.StartDate).Width(185);
            columns.Bound(model => model.EndDate).Width(32);
            columns.Bound(model => model.NoticePeriod).Width(32).Hidden(true);
            columns.Bound(model => model.BillingStartDate).Width(32).Hidden(true);
            columns.Bound(model => model.BillingEndDate).Width(32).Hidden(true);
            columns.Bound(model => model.NumberOfDaysForPaymentDueDate).Width(32).Hidden(true);
            columns.Bound(model => model.AcceptingReports).Width(32).Hidden(true);
            columns.Bound(model => model.GoverningLaw).Width(32).Hidden(true);
            columns.Bound(model => model.Comments).Width(275);
            columns.Bound(model => model.IsVisible).Hidden(true);
        columns.Command(command =>
        {
            command.Custom("Details").Click("viewDetails");
            command.Edit();
            command.Destroy();
        });
    })
    .ToolBar(toolBar =>
    {
        toolBar.Template(@<text>

            @*@(Html.Kendo().AutoComplete()
                .Name("searchbox-providers-contracts")
                         .Placeholder("Type of contract... ")
                .DataSource(datasource => datasource
                            .Read(read => read.Action("ProvidersContractsNames", controllerName, null).Data("onAdditionalData")))
                .Filter("contains")
            )*@
@if (this.User.IsInRole("Admin") || this.User.IsInRole("Dealer"))
{
    <a class="k-button k-button-icontext k-grid-add" href="/Users/Contracts/ReadProviersContracts?grid-channels-mode=insert"><span class="k-icon k-add"></span>Add new record</a>
}
            <button class="k-button k-button-icontext k-grid-excel"><span class="k-icon k-i-excel"></span>Export to Excel</button>
            <button class="k-button k-button-icontext k-grid-pdf"><span class="k-icon k-i-pdf"></span>Export to PDF</button>
        </text>);
    })
    .Groupable()
    .ColumnMenu()
    .Filterable()
    .Navigatable()
    .Resizable(r => r.Columns(true))
    .Reorderable(r => r.Columns(true))
    .Events(ev => ev.Change("selectRow"))
    .Editable(edit => edit.Mode(GridEditMode.PopUp))
    .HtmlAttributes(new { @style = "word-break:break-all;" })
    .Selectable(select => select.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Cell))
    .Excel(excel => excel
        .FileName("Providers contracts Database.xlsx")
        .Filterable(true)
        .ProxyURL(Url.Action("Excel_Export_Save", "BaseController", new {area=""}))
        )
    .Pdf(pdf => pdf
        .AllPages()
                                        .FileName("Providers contracts Database.pdf")
        .ProxyURL(Url.Action("Pdf_Export_Save", "BaseController", new {area=""}))
    )
    .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
    .Sortable(sort =>
    {
        sort.AllowUnsort(false);
        sort.SortMode(GridSortMode.SingleColumn);
    })
    .DataSource(data =>
    {
            data.Ajax()
                .Model(model => model.Id(c => c.Id))
                .PageSize(10)
                .ServerOperation(true)
                .Events(ev => ev.Error("errorAlert"))
                .Read(read => read.Action("ReadProvidersContracts", controllerName, new { providerId = Model }).Data("addSearchProviderContracts"))
                .Create(create => create.Action("CreateProviderContract", controllerName, new { currentProviderId = Model }))
                .Update(update => update.Action("UpdateProviderContract", controllerName))
                .Destroy(destroy => destroy.Action("DestroyProviderContract", controllerName));
    }))
<div id="selected">
</div>

<script>
    $('#show-all-provider-contracts').click(function () {
        var grid = $("#grid-provider-contracts").data("kendoGrid");

        grid.dataSource.read();
    });

    function onAdditionalData() {
        return {
            text: $("#searchbox-providers-contracts").val()
        };
    }

    function addSearchProviderContracts() {
        var isChecked = $('#show-all-provider-contracts').is(':checked');

        return {
            searchbox: $('#searchbox-providers-contracts').val(),
            showAll: isChecked
        };
    }

    $('#searchbox-providers-contracts').keyup(function () {
        $('#grid-provider-contracts').data('kendoGrid').dataSource.read();
    });

    function viewDetails(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location = '/Contractors/Contracts/ProviderContractDetails?contractId=' + dataItem.Id;
    }

    function selectRow() {
        var selected = $.map(this.select(), function (item) {
            return $(item).text();
        });

        $('#selected').text(selected);
    }

    function errorAlert() {
        console.log("An error ocurred");
    }

    function makeActiveOnClick(tab) {
        $(".tabs").removeClass('active');
        $(tab).addClass('active');
    }
</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

