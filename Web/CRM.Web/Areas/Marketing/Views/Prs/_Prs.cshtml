@using CRM.Services.Data.ViewModels.Marketing.Partners
@{
    ViewBag.Title = "Prs";
    var controllerName = "Prs";
}

<h2>Prs</h2>

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/kendo")

@(Html.Kendo()
    .Grid<PrViewModel>()
    .Name("grid-Prs")
    .Columns(columns =>
    {
        columns.Bound(model => model.Name);
        columns.Bound(model => model.Address);
        columns.Bound(model => model.PhoneNumber);
        columns.Bound(model => model.Email);
        columns.Bound(model => model.Media);
        columns.Bound(model => model.IsVisible);
        columns.Command(command =>
        {
            command.Custom("Details").Click("viewDetailsPrs");
            command.Edit();
            command.Destroy();
        });
    })
    .ToolBar(toolBar =>
    {
        toolBar.Template(@<text>
        @(Html.Kendo().AutoComplete()
            .Name("searchbox-pr")
            .Placeholder("Name... ")
            .DataSource(datasource => datasource
                .Read(read => read.Action("PrsNames", controllerName, null).Data("onAdditionalDataPrs")))
            .Filter("contains")
        )
        @if (this.User.IsInRole("Admin") || this.User.IsInRole("Dealer"))
{
        <a class="k-button k-button-icontext k-grid-add" href="/Marketing/Prs/ReadPrs?grid-Prs-mode=insert"><span class="k-icon k-add"></span>Add new record</a>
      }  <button class="k-button k-button-icontext k-grid-excel"><span class="k-icon k-i-excel"></span>Export to Excel</button>
        <button class="k-button k-button-icontext k-grid-pdf"><span class="k-icon k-i-pdf"></span>Export to PDF</button>
        </text>);
    })
                                    .Groupable()
                                    .ColumnMenu()
                                    .Filterable()
                                    .Navigatable()
                                    .Resizable(r => r.Columns(true))
                                    .Reorderable(r => r.Columns(true))
                                    .Events(ev => ev.Change("selectRow"))
                                    .HtmlAttributes(new { @style = "word-break:break-all;" })
                                    .Editable(edit => edit.Mode(GridEditMode.PopUp))
                                    .Selectable(select => select.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Cell))
                                    .Excel(excel => excel
                                        .FileName("Prs Database.xlsx")
                                        .Filterable(true)
                                                        .ProxyURL(Url.Action("Excel_Export_Save", "BaseController", new { area = "" }))
                                        )
                                    .Pdf(pdf => pdf
                                        .AllPages()
                                        .FileName("Prs Database.pdf")
                                        .ProxyURL(Url.Action("Pdf_Export_Save", "BaseController", new { area = "" }))
                                    )
                                    .Pageable(pageable => pageable
                                        .Refresh(true)
                                        .PageSizes(true)
                                        .ButtonCount(5))
                                    .Sortable(sort =>
                                    {
                                        sort.AllowUnsort(false);
                                        sort.SortMode(GridSortMode.SingleColumn);
                                    })
                                    .DataSource(data =>
                                    {

                                        data.Ajax()
                                            .Model(model => model.Id(c => c.Id))
                                            .PageSize(10)
                                            .ServerOperation(true)
                                            .Events(ev => ev.Error("errorAlert"))
                                            .Read(read => read.Action("ReadPrs", controllerName, null).Data("addSearchPrs"))
                                            .Create(create => create.Action("CreatePr", controllerName, null))
                                            .Update(update => update.Action("UpdatePr", controllerName))
                                            .Destroy(destroy => destroy.Action("DestroyPr", controllerName));
  
                                    }))
<div id="selected">
</div>

<script>
    function onAdditionalDataPrs() {
        return {
            text: $("#searchbox-pr").val()
        };
    }

    function addSearchPrs() {
        return { searchTerm: $('#searchbox-pr').val() };
    }

    $('#searchbox-pr').keyup(function () {
        $('#grid-Prs').data('kendoGrid').dataSource.read();
    });

    function viewDetailsPrs(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location = '/Marketing/Prs/PrsInformation?prId=' + dataItem.Id;
    }

    function selectRow() {
        var selected = $.map(this.select(), function (item) {
            return $(item).text();
        });

        $('#selected').text(selected);
    }

    function errorAlert() {
        console.log("An error ocurred");
    }

    function makeActiveOnClick(tab) {
        $(".tabs").removeClass('active');
        $(tab).addClass('active');
    }
</script>