@using TVChannelsCRM.Web.Areas.Users.ViewModels.Providers
@{
    ViewBag.Title = "Providers";
    const string controllerName = "Providers";
}

<h2>Providers</h2>
@(Html.Kendo()
    .Grid<ProviderViewModel>()
    .Name("grid-providers")
    .Columns(columns =>
    {
        columns.Bound(model => model.Name).Width(32);
        columns.Bound(model => model.Type).Width(32);
        columns.Bound(model => model.Eik).Width(32);
        columns.Bound(model => model.Email).Width(32);
        columns.Bound(model => model.ResidenceAndAddress).Width(32);
        columns.Bound(model => model.NetworkPage).Width(32);
        columns.Bound(model => model.ContactPerson).Width(32);
        columns.Bound(model => model.PhoneNumber).Width(32);
        columns.Bound(model => model.Email).Width(32);
        columns.Bound(model => model.Address).Width(32);
        columns.Bound(model => model.ChannelName).Width(32);
        columns.Bound(model => model.ReveivingOptions).Width(32);
        columns.Bound(model => model.SatelliteData).Width(32);
        columns.Bound(model => model.Degrees).Width(32);
        columns.Bound(model => model.Freq).Width(32);
        columns.Bound(model => model.Transponder).Width(32);
        columns.Bound(model => model.Encryption).Width(32);
        columns.Bound(model => model.SrFec).Width(32);
        columns.Bound(model => model.Sid).Width(32);
        columns.Bound(model => model.Vpid).Width(32);
        columns.Bound(model => model.Apid).Width(32);
        columns.Bound(model => model.OnidTid).Width(32);
        columns.Bound(model => model.Beam).Width(32);
        columns.Bound(model => model.EpgSource).Width(32);
        columns.Bound(model => model.Website).Width(32);
        columns.Bound(model => model.Presentation).Width(32);
        columns.Bound(model => model.ContractTemplate).Width(32);
        columns.Bound(model => model.Term).Width(32);
        columns.Bound(model => model.CPS).Width(32);
        columns.Bound(model => model.Commission).Width(32);
        columns.Command(command =>
        {
            command.Custom("Details").Click("viewDetails");
            command.Edit();
            command.Destroy();
        });
    })
        .ToolBar(tools =>
        {
            tools.Create();
            tools.Excel();
            tools.Pdf();
        })
        .Groupable()
        .ColumnMenu()
        .Filterable()
        .Navigatable()
        .Resizable(r => r.Columns(true))
        .Reorderable(r => r.Columns(true))
        .Events(ev => ev.Change("selectRow"))
         .HtmlAttributes(new { style = "width:4200px" })
        .Editable(edit => edit.Mode(GridEditMode.PopUp))
        .Selectable(select => select.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Cell))
        .Excel(excel => excel
            .FileName("Providers Database.xlsx")
            .Filterable(true)
            .ProxyURL(Url.Action("Excel_Export_Save", controllerName))
         )
        .Pdf(pdf => pdf
            .AllPages()
            .FileName("Providers Database.pdf")
            .ProxyURL(Url.Action("Pdf_Export_Save", controllerName))
        )
        .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
        .Sortable(sort =>
        {
            sort.AllowUnsort(false);
            sort.SortMode(GridSortMode.SingleColumn);
        })
        .DataSource(data =>
        {
            data.Ajax()
                .Model(model => model.Id(c => c.Id))
                .PageSize(10)
                .ServerOperation(true)
                .Events(ev => ev.Error("errorAlert"))
                .Read(read => read.Action("ReadProviders", controllerName))
                .Create(create => create.Action("CreateProvider", controllerName))
                .Update(update => update.Action("UpdateProvider", controllerName))
                .Destroy(destroy => destroy.Action("DestroyProvider", controllerName));
        }))
<div id="selected">
</div>

<script>
    function viewDetails(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location = '/Users/Providers/ProviderDetails?providerId=' + dataItem.Id;
    }

    function selectRow() {
        var selected = $.map(this.select(), function (item) {
            return $(item).text();
        });

        $('#selected').text(selected);
    }

    function errorAlert() {
        console.log("An error ocurred");
    }

    function makeActiveOnClick(tab) {
        $(".tabs").removeClass('active');
        $(tab).addClass('active');
    }
</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

