@using TVChannelsCRM.Web.Areas.Administration.ViewModels.Admin
@{
    const string controllerName = "Admin";
}

<h2>Users</h2>

@(Html.Kendo()
    .Grid<UserViewModel>()
    .Name("grid-users")
    .Columns(columns =>
    {
        columns.Bound(model => model.UserName);
        columns.Bound(model => model.Email);
        columns.Bound(model => model.FirstName);
        columns.Bound(model => model.SecondName);
        columns.Bound(model => model.ThirdName);
        columns.Bound(model => model.Gender);
        columns.Bound(model => model.Age);
        columns.Bound(model => model.Town);
        columns.Bound(model => model.Country);
        columns.Bound(model => model.CreatedOn).Format("{0:dd/MM/yyyy}");
        columns.Bound(model => model.EnterprisePosition);
        columns.Bound(model => model.PhoneNumber);
        columns.Bound(model => model.Website);
        columns.Command(command =>
        {
            command.Custom("Profile").Click("viewDetails");
            command.Edit();
            command.Destroy();
        });
    })
        .ToolBar(tools =>
        {
            tools.Create();
            tools.Excel();
            tools.Pdf();
        })
        .Groupable()
        .ColumnMenu()
        .Filterable()
        .Navigatable()
        .Resizable(r => r.Columns(true))
        .Reorderable(r => r.Columns(true))
        .Events(ev => ev.Change("selectRow"))
        .HtmlAttributes(new { style = "width:2000px" })
        .Editable(edit => edit.Mode(GridEditMode.PopUp))
        .Selectable(select => select.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Cell))
        .Excel(excel => excel
            .FileName("Users Database.xlsx")
            .Filterable(true)
            .ProxyURL(Url.Action("Excel_Export_Save", controllerName))
         )
        .Pdf(pdf => pdf
            .AllPages()
                 .FileName("Users Database.pdf")
            .ProxyURL(Url.Action("Pdf_Export_Save", controllerName))
        )
        .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
        .Sortable(sort =>
        {
            sort.AllowUnsort(false);
            sort.SortMode(GridSortMode.SingleColumn);
        })
        .DataSource(data =>
        {
            data.Ajax()
                .Model(model =>
                {
                    model.Id(c => c.Id);
                    model.Field(c => c.CreatedOn).Editable(false);
                })
                .PageSize(10)
                .ServerOperation(true)
                .Events(ev => ev.Error("errorAlert"))
                .Read(read => read.Action("ReadUsers", controllerName))
                .Create(create => create.Action("CreateUser", controllerName))
                .Update(update => update.Action("UpdateUser", controllerName))
                .Destroy(destroy => destroy.Action("DestroyUser", controllerName));
        }))
<div id="selected">
</div>

<script>
    function edit(e) {
        if (!e.model.isNew()) {
            $("#CreatedOn").hide();
        }
    }

    function selectRow() {
        var selected = $.map(this.select(), function (item) {
            return $(item).text();
        });

        $('#selected').text(selected);
    }

    function viewDetails(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        window.location = '/Users/Profile/Index?userId=' + dataItem.Id;
    }

    function errorAlert() {
        console.log("An error ocurred");
    }

    function makeActiveOnClick(tab) {
        $(".tabs").removeClass('active');
        $(tab).addClass('active');
    }

    var uid = $('.k-edit-form-container').closest('[data-role=window]').data('uid'),

        model = $('#grid-users').data('kendoGrid').dataSource.getByUid(uid);

    model.set('PasswordHash', '');
</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

